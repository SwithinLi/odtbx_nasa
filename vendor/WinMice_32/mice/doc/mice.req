 
Mice Required Reading
===========================================================================
 
   Last revised on 2010 MAR 15 by E. D. Wright.
 
 
Abstract
--------------------------------------------------------
 
   Mice is the ANSI C based interface between the MATLAB environment, a
   product of Mathworks, Inc. (http://www.mathworks.com), and the CSPICE
   library.
 
 
Contact
 
   Developer contact: Ed Wright, Jet Propulsion Laboratory, 1-818-354-0371
   ed.wright@jpl.nasa.gov.
 
 
Mailing List
 
   NAIF provides a mailing list for Mice users. Register with the list at
   URL:
 
      http://naif.jpl.nasa.gov/mailman/listinfo/mice_discussion
 
 
Design Concept
--------------------------------------------------------
 
   Simplistically, Mice serves as a threshold by which a user can access
   SPICE APIs from the MATLAB environment. MATLAB can then make use of
   SPICE ancillary data in space science mission activities such as mission
   evaluation, science observation planning, and science data analysis.
 
   Mice uses the MATLAB external interface functionality (MEX) to provide
   MATLAB users access to selected CSPICE routines from within MATLAB. A
   user need only install the interface library and the interface wrapper
   files to gain use of these functions.
 
   MATLAB interfaces exist for a subset of the CSPICE wrappers, those
   routines with name style "routine_c", with "routine" the name of the
   CSPICE module. The Mice interfaces tend to be the "commonly used"
   routines involved with kernel data access, time conversion, and geometry
   calculations. Refer to the CSPICE required reading document (cspice.req)
   for information concerning CSPICE.
 
   Mice passes data from the MATLAB environment to the CSPICE library, so a
   Mice interface call performs few operations other than recasting input
   from MATLAB into CSPICE form and recasting CSPICE output to MATLAB form
   for return. Conforming to MATLAB norms, Mice uses base 1 array indices.
 
   NAIF employs the ANSI C standard when writing MATLAB/CSPICE interface
   source code.
 
   For each platform, Mice uses the same binary and text kernels as the C
   or FORTRAN SPICE Toolkit for that platform.
 
 
Mice Functionality
 
            Kernel (file): loaders
 
            SPK: readers
 
            Binary PCK: readers
 
            CK: readers, writers
 
            Text Kernel: readers
 
            Coordinate systems: translation between rectangular,
            cylindrical, latitudinal, geodetic, spherical, and right
            ascension declination systems.
 
            Body name/code translation
 
            Rotation functions
 
            Euler angle functions
 
            Quaternion functions
 
            Time conversion functions: convert between various time systems
            and representations
 
            Spacecraft clock functions: convert between spacecraft clock
            ticks and other time systems
 
            Ellipsoid functions: calculate near points, surface intercepts,
            normal vectors
 
            Constant functions: standard epochs, radian/degree ratios,
            speed of light
 
            SPICE Windows functions: intersection, union, element-of,
            relative comparisons
 
   Mice lacks interfaces to the various CSPICE vector and matrix math
   routines since MATLAB natively provides such functions.
 
 
Platforms
 
   NAIF offers Mice for several computing environments. These environments
   are listed on the NAIF website
 
      http://naif.jpl.nasa.gov/naif/toolkit.html
 
   and in the intro_to_toolkit tutorial also available from the NAIF
   website.
 
 
Installation
===========================================================================
 
   The Mice toolkit comprises the full CSPICE distribution plus the Mice
   source code, associated build files, and Mice documentation. A user
   without a MATLAB installation cannot use the Mice interface. NAIF
   expects MATLAB version 7.2 (R2006a) or later for Mice use.
 
 
Builds
--------------------------------------------------------
 
   NAIF distributes the Mice package with all libraries and executables. If
   the need develops to rebuild the Mice interface, recognize the build
   requires access to MATLAB support files not provided by NAIF. Builds on
   all platforms must access the mex.h file. Please consult the MATLAB
   documentation for further information on the MEX mechanism. NAIF coded
   the build scripts supplied with Mice to use the "standard" MATLAB
   installation directory structure when accessing support files.
 
   The build system on Unix/Linux platforms uses the Mathworks supplied
   "mex" script and NAIF edited mexopts.sh option file. The mexopts.sh file
   defines the parameters used by the mex script to compile the library.
   This file must exist in the mice source directory:
 
      /path_to/mice/src/mice
 
   The build procedure on a Windows platform does not use a mexopts file.
 
 
Build Problems
 
   When recompiling the mice.mex shared library, ensure the "mex" script
   uses the same compiler as used to compile the CSPICE toolkit. Mathworks
   supplies the 'lcc' compiler with the Microsoft Windows MATLAB package.
   NAIF does not support CSPICE under this compiler; attempts to link lcc
   compiled code against Microsoft CSPICE library cspice.lib will fail.
 
   Also ensure your path includes the MATLAB "mex" script and not the
   Octave version of "mex."
 
 
Directory Structure
--------------------------------------------------------
 
   A Mice package includes all CSPICE products (source, documentation,
   libraries, executables) plus Mice specific items.
 
   The package has the same directory structure as CSPICE, with name
   modifications and the additional files particular to Mice:
 
                                     mice/
                                      |
                                      |
      data/   doc/   etc/   exe/   include/  lib/  src/  makeall.csh(.bat)
               |                               |      |
               |                               |      |
            html/  *.req  *. ug  ...           |    mice/  cspice/  ...
               |                               |      |
               |                               |      |
               |                               |  mice.c
           index.html  cspice/  mice/ ...      |  cspice_*.m
                                   |           |  mice_*.m
                                   |           |  *.h
                                index.html     |  *.c
                             cspice_*.html     |  mexopts.sh
                               mice_*.html     |
                                               |
                                               |
                                 cspice.a  csupport.a  mice.mex*
 
   The makeall.csh (makeall.bat) file is a master build script specific to
   the platform architecture.
 
 
Using Mice
===========================================================================
 
 
Preparing the Environment
--------------------------------------------------------
 
   Use of Mice requires both the ``lib'' and mice ``src'' directories exist
   in the MATLAB search path.
 
   The inclusion of the Mice directories to the MATLAB search path can be
   done programatically:
 
      >> addpath('/path_to/mice/src/mice/')
      >> addpath('/path_to/mice/lib/' )
 
   or
 
      >> addpath('c:\path_to\mice\src\mice\')
      >> addpath('c:\path_to\mice\lib\' )
 
   A user can also add the Mice directories to the MATLAB search path by
   setting the MATLABPATH environment variable.
 
      setenv MATLABPATH path_to/mice/src/mice/
 
 
First Test of Mice Installation
--------------------------------------------------------
 
   Ensure a proper setup - execute the MATLAB command:
 
      >> which mice
 
   MATLAB should return the path to the mice.mex* file if the file exists
   within a directory searched by MATLAB.
 
      /path_to/mice/lib/mice.mexmac
 
   If MATLAB outputs
 
      'mice' not found.
 
   then the MATLAB search path does not include the directory containing
   the mice.mex* file.
 
   The MATLAB command:
 
      >> cspice_tkvrsn('toolkit')
 
   causes MATLAB to display the string identifier for the CSPICE library
   version (N00XX) against which Mice linked.
 
 
Documentation
--------------------------------------------------------
 
   Mice documentation includes an HTML based help facility that links the
   Mice API documentation set with the corresponding CSPICE API
   documentation set.
 
   The index.html file in
 
      mice/doc/html
 
   or
 
      mice\doc\html
 
   subdirectory is the Mice HTML documentation "homepage."
 
 
Documentation Conventions
 
      Argument type  Format        Example
      -------------  ----------    ----------------------------------------
 
      string         back ticks    cspice_furnsh( `file` )
 
      array of       (N)           [out1, out2] = cspice_function(arr(N))
        size NX1
 
      array of       (N,M)         [out1, out2] = cspice_function(arr(N,M))
        size NXM
 
      return an      ()            [values()] = cspice_bodvrd(`body`, ...
        Nx1 array                                             `item`, ...
        of arbitrary                                            maxn)
        size 'N'
 
      vectorized     underscore    [_et_] = cspice_str2et(_`str`_)
        argument
 
      optional       brackets      [ids] = cspice_spkobj( _`spk`_, ...
        input        deliminating                         size,  ...
                     input arg                            [ids_i] )
 
 
 
The Mice API
--------------------------------------------------------
 
   MATLAB views all calls to MEX libraries as functions, that is a call has
   the form:
 
      output = name( inputs )
 
   Those routines returning multiple arguments on output do so in the
   expected MATLAB manner:
 
      [output1, output2, ...] = name( inputs )
 
   A set of MATLAB *.m wrapper files provides user access to the MEX
   library. The *.m files include MATLAB specific versions of the
   corresponding CSPICE wrapper's header describing the use and
   implementation of the call. Theses headers also include example code.
 
   The MATLAB "help" command outputs the wrapper headers, e.g.:
 
      >> help cspice_spkezr
 
          -Abstract
 
             CSPICE_SPKEZR returns the state (position and velocity) of
             a target body relative to an observing body, optionally
             corrected for light time (planetary aberration) and stellar
             aberration.
 
               ...
 
 
API Functionality
 
   Consistent with the MATLAB norm, Mice calls do not explicitly return
   array dimensions. The user can obtain the size description of an array
   using the MATLAB command "size":
 
      >> v = [ 1; 2; 3]
 
      v =
 
           1
           2
           3
 
      >> size(v)
 
      ans =
 
           3     1
 
   "size" shows 'v' as a 3x1 array.
 
   Mice also checks the dimensionality of input vectors and matrices, i.e.
   an API expecting a double precision 3x1 array as input signals an error
   for any other data type or dimensionality.
 
      >> v = [ 1; 2; 3; 4]
 
      v =
 
           1
           2
           3
           4
 
      >> [r, lon, z] = cspice_reccyl(v)
 
      ??? MICE(BADARG): Input argument (`rectan') must be an 3x1 vector
      or a vectorized vector (3xN).
 
 
Wrapper Types: mice_x.m, cspice_x.m
 
   Several CSPICE routines have two MATLAB interfaces differing only in the
   output format. An interface prefixed with 'cspice_' retains essentially
   the same argument list as the CSPICE counterpart. An interface prefixed
   with 'mice_' returns a structure, with the fields of the structure
   corresponding to the output arguments of the CSPICE counterpart. For
   example the CSPICE call spkezr_c has the format:
 
      spkezr_c( targ, et, ref, abcorr, obs, state, &lt );
 
   The corresponding cspice_spkezr call:
 
      [state, lt] = cspice_spkezr(targ, et, ref, abcorr, obs)
 
   The corresponding mice_spkezr call:
 
      traj        = mice_spkezr(targ, et, ref, abcorr, obs)
 
   The two calls return the same data with the cspice_spkezr version
   returning separate arguments, while the mice_spkezr returns a structure
   composed of two fields, "state" (traj.state) and "lt" (traj.lt).
 
 
Return of Integer Values as Double
 
   The current MATLAB convention for arithmetic involving both integers and
   doubles as stated in the documentation (as of this writing):
 
      "For all binary operations in which one operand is an array of
      integer data type and the other is a scalar double, MATLAB computes
      the operation using elementwise double-precision arithmetic, and
      then converts the result back to the original integer data type."
 
   Due to this implementation, Mice interfaces return/cast as double those
   integer arguments a user might later include in a calculation.
 
 
Use of Vectorized Arguments
--------------------------------------------------------
 
   The Mice interfaces allow use of vectorized input arguments where
   appropriate, e.g. routines with scalar time as an input argument accepts
   a vector of times, resulting in vectorized output arguments.
 
   Let COUNT define the measure of vectorization.
 
 
Vectorizing a Numeric Scalar
 
   MATLAB defines a numeric scalar as a 1x1 array. For use in Mice, a
   vectorized numeric scalar has dimension 1xCOUNT.
 
      >> COUNT = 5;
      >> et = [1:COUNT] * cspice_spd * 5.
 
      et =
 
            432000      864000     1296000     1728000     2160000
 
      >> size( et )
 
      ans =
 
           1     5
 
 
Vectorizing a Numeric Vector
 
   A vectorized numeric Nx1 array has dimension NxCOUNT.
 
      >> [state,lt] = cspice_spkezr( 'MOON' , ...
                                     et     , ...
                                     'J2000', ...
                                     'NONE' , ...
                                     'EARTH' );
      >> size( state )
 
      ans =
 
           6     5
 
 
Vectorizing a Structure
 
   A vectorized structure has dimension 1xCOUNT.
 
      >> traj = mice_spkezr( 'MOON' , ...
                              et    , ...
                             'J2000', ...
                             'LT+S' , ...
                             'EARTH' );
      >> size(traj)
 
      ans =
 
           1     5
 
 
Vectorizing a Numeric Matrix
 
   Scalar use of cspice_pxform returns a 3x3 array.
 
      >> xform = cspice_pxform( 'J2000', 'IAU_MOON', et(1) );
      >> size(xform)
 
      ans =
 
           3     3
 
   A vectorized numeric NxM array has dimension NxMxCOUNT.
 
      >> xform = cspice_pxform( 'J2000', 'IAU_MOON', et );
      >> size(xform)
 
      ans =
 
           3     3     5
 
   In this case, vectorized use returns 5 3x3 transformation matrices. To
   access the ith matrix:
 
         xform_i = xform(:,:,i)
 
 
Vectorizing a String
 
   a scalar string has dimension 1xLENGTH
 
      >> utc = cspice_et2utc( et(1), 'C', 5 )
 
      utc =
 
      2000 JAN 06 11:58:55.81593
 
      >> size( utc )
 
      ans =
 
           1    26
 
   A vector of strings has dimension COUNTxLENGTH.
 
      >> utc = cspice_et2utc( et, 'C', 5 )
 
      utc =
 
      2000 JAN 06 11:58:55.81593
      2000 JAN 11 11:58:55.81578
      2000 JAN 16 11:58:55.81564
      2000 JAN 21 11:58:55.81550
      2000 JAN 26 11:58:55.81537
 
      >> size( utc )
 
      ans =
 
           5    26
 
      >> et1 = cspice_str2et( utc )
 
      et1 =
 
         1.0e+06 *
 
          0.4320    0.8640    1.2960    1.7280    2.1600
 
   Mice string input arguments also accept a cell of strings. Note, all
   string outputs return as NxM character arrays.
 
      >> utc1 = cellstr( utc )
 
      utc1 =
 
          '2000 JAN 06 11:58:55.81593'
          '2000 JAN 11 11:58:55.81578'
          '2000 JAN 16 11:58:55.81564'
          '2000 JAN 21 11:58:55.81550'
          '2000 JAN 26 11:58:55.81537'
 
      >> size( utc1 )
 
      ans =
 
           5     1
 
      >> et2 = cspice_str2et( utc1 )
 
      et2 =
 
         1.0e+06 *
 
          0.4320    0.8640    1.2960    1.7280    2.1600
 
   When processing vectorized input arguments, Mice confirms all vectorized
   inputs have the same measure of vectorization. Mice signals an error
   when inputs do not agree with regard to the measure.
 
      >> range = [ 1., 2., 3.  ]
 
      range =
 
           1     2     3
 
      >> dec   = [ 0., 0.1  ]
 
      dec =
 
               0    0.1000
 
      >> ra    = [ 0., 0.75, 1.5 ]
 
      ra =
 
               0    0.7500    1.5000
 
      >> rectan = cspice_radrec( range, ra, dec)
 
      ??? MICE(BADARG): Input argument 3 (`dec') must have same
      length as `range'
 
   Please consult the API documentation for details on a particular
   routine's argument set.
 
 
SPICE Windows in Mice
--------------------------------------------------------
 
   The Mice implementation of SPICE windows consists of double precision
   Nx1 arrays with N an even or zero value. Mice windows lack a constant
   size as the windows interfaces dynamically adjust window size before
   return, therefore the SPICE concept of window cardinality degenerates to
   window size.
 
   Refer to the Windows Required Reading document, windows.req, for
   specific information on the implementation of windows in Mice.
 
 
Mice Implementation of the SPICE Error Subsystem
--------------------------------------------------------
 
   By design, Mice lacks interfaces to the CSPICE error subsystem. The
   interface code "catches" any CSPICE error, then passes the error
   description to the MATLAB interpreter as a MATLAB error message.
 
 
Common Errors and Responses
 
   Mice MEX library not loaded or present in search path
 
      ??? Undefined function or variable 'mice'.
 
   No loaded leapseconds kernel. Call cspice_et2utc without loading
   kernels:
 
      >> str = cspice_et2utc( 0., 'C', 5)
 
      ??? SPICE(MISSINGTIMEINFO): [et2utc_c->ET2UTC->UNITIM] The
      following, needed to convert between the input uniform time
      scales, were not found in the kernel pool: DELTET/DELTA_T_A,
      DELTET/K, DELTET/EB, DELTET/M. Your program may have failed
      to load a leapseconds kernel. Other possible causes of this
      problem include loading an invalid leapseconds kernel---one
      that lacks an initial \begindata marker or final newline
      character, or is otherwise corrupted---or deleting previously
      loaded kernel pool variables via calls to UNLOAD or CLPOOL.
      Use the SPICE routine FURNSH (in Fortran Toolkits, FURNSH is
      an entry point of KEEPER) to load a leapseconds kernel; make
      sure the kernel is up to date. See the Kernel and Time Required
      Reading or the "Intro to Kernels" and "LSK and SCLK" SPICE
      Tutorials for details.
 
   No loaded SPKs. Call cspice_spkezr without loading SPKs:
 
      >> [state, ltime] = cspice_spkezr( 'MOON' , ...
                                          0.    , ...
                                         'J2000', ...
                                         'LT+S' , ...
                                         'EARTH' )
 
      ??? SPICE(NOLOADEDFILES): [spkezr_c->SPKEZR->SPKEZ->SPKSSB->SPKGEO->
      SPKSFS] At least one SPK file needs to be loaded by SPKLEF before
      beginning a search.
 
   NAIF designed the Mice error system to handle vectorized functions.
   Consider the "Insufficient ephemeris data" error message from a
   cspice_spkezr call with a scalar 'et':
 
      >> et = cspice_str2et( '2050 JAN 30' );
 
      >> [state, ltime] = cspice_spkezr( 'MOON' , ...
                                          et    , ...
                                         'J2000', ...
                                         'LT+S' , ...
                                         'EARTH' )
 
      ??? SPICE(SPKINSUFFDATA): [spkezr_c->SPKEZR->SPKEZ->SPKSSB->SPKGEO]
      Insufficient ephemeris data has been loaded to compute the state of
      399 (EARTH) relative to 0 (SOLAR SYSTEM BARYCENTER) at the ephemeris
      epoch 2050 JAN 30 00:01:04.184.
 
   The same error when using a vectorized 'et':
 
      >> et0 = cspice_str2et( '2049 DEC 30' );
      >> et  = [0:1000000] + et0;
      >> [state, ltime] = cspice_spkezr( 'MOON' , ...
                                          et    , ...
                                         'J2000', ...
                                         'LT+S' , ...
                                         'EARTH' )
 
      ??? SPICE(SPKINSUFFDATA): [spkezr_c->SPKEZR->SPKEZ->SPKACS->SPKGEO]
      Insufficient ephemeris data has been loaded to compute the state of
      399 (EARTH) relative to 0 (SOLAR SYSTEM BARYCENTER) at the ephemeris
      epoch 2050 JAN 01 00:01:05.183. Failure occurred at input vector
      index 172800.
 
   The "Failure occurred at input vector index ..." string appears only
   when using vectorized arguments. The element value refers to the vector
   index at which the failure occurred. In this case, the kernel system
   lacked data to perform the state evaluation at time value et(172800).
 
 
Command Format Error
 
   When the Mice interface detects an error in the command format, it
   signals an error and outputs a usage string displaying the correct
   format. An example usage response:
 
      >> cspice_et2utc
 
      ??? Error using ==> cspice_et2utc
      Usage: [_`utcstr`_] = cspice_et2utc(_et_, `format`, prec)
 
 
Error Handling
 
   MATLAB includes a try...catch...end implementation usable to trap any
   CSPICE signaled error, e.g.:
 
      %
      % Make a call to an interface function. Wrap the
      % call in a try/catch block.
      %
      try
 
         [output1, output2, ...] = cspice_function( input1, input2, ...)
 
      catch
 
         %
         % If an error occurred, retrieve that string
         % from 'lasterr'. Output the error string.
         %
         disp( lasterr )
 
      end
 
   Use of try...catch...end grants the user control over the error response
   from the CSPICE routines.
 
   Example:
 
   Attempt to return a state without loading kernels.
 
      %
      % Wrap cspice_spkezr in a try...catch block.
      %
      try
 
         [state, ltime] = cspice_spkezr( 'MOON' , ...
                                          0.    , ...
                                         'J2000', ...
                                         'LT+S' , ...
                                         'EARTH' )
 
      catch
 
         %
         % Check for an error response. Print the message if found.
         %
         disp( lasterr )
 
      end
 
      %
      % Continue program execution.
      %
 
            ...
 
   The output displays the expected message:
 
      SPICE(NOLOADEDFILES): [spkezr_c->SPKEZR->SPKEZ->SPKSSB->SPKGEO->
      SPKSFS] At least one SPK file needs to be loaded by SPKLEF
      before beginning a search.
 
 
Correlation Between Mice and MATLAB
===========================================================================
 
 
MATLAB vs. CSPICE Functionality
--------------------------------------------------------
 
   CSPICE matrix operations and their equivalent expression in MATLAB code.
 
      CSPICE      Native MATLAB       Description
      -------     ---------------     -----------
      mtxm_c      m1' * m2            Matrix transpose times matrix, 3x3
      mtxmg_c     m1' * m2            Matrix transpose times matrix
                                      (general dim.)
      mtxv_c      m1' * v1            Matrix transpose times vector, 3x3
      mtxvg_c     m1' * v1            Matrix transpose times vector
                                      (general dim.)
      mxm_c       m1 * m2             Matrix times matrix, 3x3
      mxmg_c      m1 * m2             Matrix times matrix (general dim.)
      mxmt_c      m1 * m2'            Matrix times matrix transpose, 3x3
      mxmtg_c     m1 * m2'            Matrix times matrix transpose
                                      (general dim.)
      mxv_c       m1 * v1             Matrix times vector, 3x3
      mxvg_c      m1 * v1             Matrix times vector (general dim.)
      vadd_c      v1 + v2             Vector addition, 3 dimensional
      vaddg_c     v1 + v2             Vector addition (general dim.)
      vcrss_c     cross(v1, v2)       Vector cross product, 3 dimensions
      vdist_c     norm(v1 - v2)       Vector distance
      vdistg_c    norm(v1 - v2)       Vector distance (general dim.)
      vdot_c      dot(v1, v2)         Vector dot product, 3 dimensions
      vdotg_c     dot(v1, v2)         Vector dot product (general dim.)
      vequ_c      v2 = v1             Vector equality, 3 dimensions
      vequg_c     v2 = v1             Vector equality (general dim.)
      vhat_c      v1/norm(v1)         "V-Hat", unit vector along V,
                                      3 dimensions
      vhatg_c     v1/norm(v1)         "V-Hat", unit vector along V
                                      (general dim.)
      vlcom3_c    a*v1 + b*v2 + c*v3  Vector linear combination,
                                      3 dimensions
      vlcom_c     a*v1 + b*v2         Vector linear combination,
                                      3 dimensions
      vlcomg_c    a*v1 + b*v2         Vector linear combination
                                      (general dim.)
      vminug_c    -v1                 Minus V, "-V" (general dim.)
      vminus_c    -v1                 Minus V, "-V", 3 dimensions
      vnorm_c     norm(v1)            Vector norm, 3 dimensions
      vnormg_c    norm(v1)            Vector norm (general dim.)
      vpack_c     v1 = [x, y, z]'     Pack three scalar components into a
                                      vector
      vscl_c      s * v1              Vector scaling, 3 dimensions
      vsclg_c     s * v1              Vector scaling (general dim.)
      vsub_c      v1 - v2             Vector subtraction, 3 dimensions
      vsubg_c     v1 - v2             Vector subtraction (general dim.)
      vtmv_c      v1' * m1 * v2       Vector transpose times matrix times
                                      vector, 3 dim
      vtmvg_c     v1' * m1 * v2       Vector transpose times matrix times
                                      vector (general dim.)
      vupack_c    x = v1(1)           Unpack three scalar components from
                                      a vector
                  y = v1(2)
                  z = v1(3)
      vzero_c     all( v1 == 0 )      Is a vector the zero vector?
      vzerog_c    all( v2 == 0 )      Is a vector the zero vector?
                                      (general dim.)
 
 
Watch outs (Common problems)
===========================================================================
 
 
Kernel Access
--------------------------------------------------------
 
   The CSPICE design supposes use in a single program run-time environment;
   the program accomplishes its function, then quits. With respect to Mice,
   consider the MATLAB environment as a single program run. Since Mice
   functions as an extension to MATLAB, loaded kernels and opened files
   remain in memory after a script runs unless explicitly unloaded or
   closed (a script is not the program, MATLAB is the program). A user
   should consider unloading unneeded kernels via cspice_unload or clearing
   all loaded kernels and kernel pool variables with a cspice_kclear call
   at the end of a MATLAB script or session to avoid both exceeding the
   maximum number of allowed loaded kernels and providing unintended access
   to kernel data.
 
 
Return Functions Without Input Arguments
--------------------------------------------------------
 
   The constants functions return a value without an input argument list.
 
   Example of an incorrect function call:
 
      >> x = cspice_dpr()
 
   Example of a correct function call:
 
      >> x = cspice_dpr
 
 
Path Names
--------------------------------------------------------
 
   Pass file path names through CSPICE in the form native to the host
   operating system. The strings pass to the CSPICE library without
   modification.
 
